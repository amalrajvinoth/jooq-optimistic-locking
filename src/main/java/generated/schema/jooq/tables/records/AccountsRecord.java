/*
 * This file is generated by jOOQ.
 */
package schema.jooq.tables.records;


import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import schema.jooq.tables.Accounts;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record6<String, BigDecimal, String, Integer, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.accounts.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.accounts.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>public.accounts.currency</code>.
     */
    public void setCurrency(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.accounts.currency</code>.
     */
    public String getCurrency() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.accounts.version</code>.
     */
    public void setVersion(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.accounts.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.accounts.created</code>.
     */
    public void setCreated(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.accounts.created</code>.
     */
    public OffsetDateTime getCreated() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.accounts.updated</code>.
     */
    public void setUpdated(OffsetDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.accounts.updated</code>.
     */
    public OffsetDateTime getUpdated() {
        return (OffsetDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, BigDecimal, String, Integer, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, BigDecimal, String, Integer, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Accounts.ACCOUNTS.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return Accounts.ACCOUNTS.BALANCE;
    }

    @Override
    public Field<String> field3() {
        return Accounts.ACCOUNTS.CURRENCY;
    }

    @Override
    public Field<Integer> field4() {
        return Accounts.ACCOUNTS.VERSION;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Accounts.ACCOUNTS.CREATED;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Accounts.ACCOUNTS.UPDATED;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getBalance();
    }

    @Override
    public String component3() {
        return getCurrency();
    }

    @Override
    public Integer component4() {
        return getVersion();
    }

    @Override
    public OffsetDateTime component5() {
        return getCreated();
    }

    @Override
    public OffsetDateTime component6() {
        return getUpdated();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getBalance();
    }

    @Override
    public String value3() {
        return getCurrency();
    }

    @Override
    public Integer value4() {
        return getVersion();
    }

    @Override
    public OffsetDateTime value5() {
        return getCreated();
    }

    @Override
    public OffsetDateTime value6() {
        return getUpdated();
    }

    @Override
    public AccountsRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public AccountsRecord value2(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountsRecord value3(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public AccountsRecord value4(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public AccountsRecord value5(OffsetDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public AccountsRecord value6(OffsetDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public AccountsRecord values(String value1, BigDecimal value2, String value3, Integer value4, OffsetDateTime value5, OffsetDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(String id, BigDecimal balance, String currency, Integer version, OffsetDateTime created, OffsetDateTime updated) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setBalance(balance);
        setCurrency(currency);
        setVersion(version);
        setCreated(created);
        setUpdated(updated);
        resetChangedOnNotNull();
    }
}
